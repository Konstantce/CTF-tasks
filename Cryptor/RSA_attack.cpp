#include "stdafx.h"

//Modules for RSA; N1 is the smallest of them
char* module_values[3]={"8769382569369657803086243072934885816580191253501078889741031803240287823072830795825348656470510124293608077663922619340686640086376656215519245633544865088584897320559789873866699364415357805509308987319042174775873847912600169477261907721200446628992152708829599994554654568048633400503489105287545371814842144683556457456632958355841259920030385121623436375290823187943439982609366341320431941859698682187290978401499850417885737393353382420046780581989144735256053452338371365283525729518137862098754137705638286990510374828572469405835006397291843317479629751232360581770781260313617159523339829310542865360973",
	"16641232558008082569072755981139929534310277003825636370117280360586792006173000345248870909405490163782428965357585774135952656969994563662987557444687981734473925434494610603841799408783771395787921030694228929449499603107463078533299168134221519095050604356235671000307081776968001942046185624486992839010649980386408074499989184671809470571404744580685508238120539156543844749096699573023156371314661322710816376349130587867338126777467459699166329585414171830665270870208609324522210567359784452559076441172625777002185091610881224062051166361789674985037719748547252902252135938183711795370174487562423790707821",
		"14838493139945955887283262879803721399112945940019282151226200084081889272810582747314798986067549731912126091191959539634485712464017530737841463675802189682390544800786692910048607162795234692100428547461834541302493669259032930743367853937448648874889495656623082778699124284153758531887057303280042685837060081844296748762758365988562601515791442455174424418175141460198432527291057117854054756662539680092253321643600725563101888819435496736721366683826469620939274209340835390946392215404593754680601775875311263660997430300461775357032651879275620247801041675654599200662668290657734330742506352599309225057563"};

long get_file_size(FILE* fd)
{
	
	fseek(fd,0,SEEK_END);
	long result=ftell(fd);
	fseek(fd,0,SEEK_SET);
	return result;
}


int main(int argc, char* argv[])
{
	char directory[100];
	char name[40];
	int count=GetModuleFileNameA(NULL,directory,70);
	while (directory[count] != '\\')
		count--;
	count++;
	strcpy(name,directory+count);
	directory[count]='\x00';
	strcat(directory,"cryptor.exe");
	if (argc !=2)
	{
		printf("Usage: %s  file_to_encrypt\n",name);
		return 1;
	}
	char* filename=argv[1];
	FILE *fd;
	if ((fd=fopen(filename,"rb"))==NULL)
	{
		printf("No file %s found\n",argv[1]);
		return 1;
	}
	long filesize=get_file_size(fd);
	if (filesize > SIZE)
	{
		printf("File %s is too large to process\n",argv[1]);
		return 1;
	}
	char buffer[SIZE+1];
	fread(buffer,1,filesize,fd);
	fclose(fd);

	miracl *mip=mirsys(1024,16);
	mip->IOBASE=10;
	big plaintext=mirvar(0);
	big ciphertext=mirvar(0);
	big public_exponent=mirvar(3);
	big modules[3];
	for(int i=0;i<3;i++)
	{
		modules[i]=mirvar(0);
		cinstr(modules[i],module_values[i]);
	}
	bytes_to_big(filesize,buffer,plaintext);
	char file_to_open[140];
	sprintf(file_to_open,"%s:%s",directory,"secret");
	fd=fopen(file_to_open,"wb");
	for(int i=0;i<3;i++)
	{
		powmod(plaintext,public_exponent,modules[i],ciphertext);
		big_to_bytes(SIZE,ciphertext,buffer,TRUE);
		fwrite(buffer,1,SIZE,fd);
	}
	fclose(fd);
	
	for(int i=0;i<3;i++)
	{
		mirkill(modules[i]);
	}
	mirkill(plaintext);
	mirkill(ciphertext);
	mirkill(public_exponent);
	mirexit();
	
	return 0;
}

